from unittest import TestCase
# import io
# from a38.builder import Builder
# from a38.fattura import IdFiscaleIVA, DatiAnagrafici
from a38 import fields
from a38 import validation

NS = "http://ivaservizi.agenziaentrate.gov.it/docs/xsd/fatture/v1.2"


class FieldTestMixin:
    field_class = fields.Field

    def get_field(self, **kw):
        f = self.field_class(**kw)
        f.set_name("test")
        return f

    def test_xmltag(self):
        # XML tag is autogenerated from the field name
        f = self.get_field()
        self.assertEqual(f.get_xmltag(), "Test")

        # But can be overridden with the xmltag argument
        f = self.get_field(xmltag="OtherName")
        self.assertEqual(f.get_xmltag(), "OtherName")

    def test_empty(self):
        f = self.get_field()

        # Validating a field with null=False raises an error
        with self.assertRaises(validation.ValidationError):
            f.validate(None)

        # But null values are tolerated outside validation, while structures
        # are being filled
        self.assertIsNone(f.clean_value(None))

    def test_nullable(self):
        f = self.get_field(null=True)
        self.assertIsNone(f.validate(None))
        self.assertIsNone(f.clean_value(None))


class TestField(FieldTestMixin, TestCase):
    def test_value(self):
        f = self.get_field(null=True)
        self.assertEqual(f.validate("value"), "value")

    def test_default(self):
        f = self.get_field(default="default")
        self.assertEqual(f.clean_value(None), "default")


class TestStringField(FieldTestMixin, TestCase):
    field_class = fields.StringField

    def test_value(self):
        f = self.get_field()
        self.assertEqual(f.validate("value"), "value")
        self.assertEqual(f.validate(12), "12")

    def test_length(self):
        f = self.get_field(length=3)
        with self.assertRaises(validation.ValidationError):
            f.validate("va")
        with self.assertRaises(validation.ValidationError):
            f.validate("valu")
        with self.assertRaises(validation.ValidationError):
            f.validate(1.15)
        self.assertEqual(f.validate("val"), "val")
        self.assertEqual(f.validate(1.2), "1.2")

    def test_min_length(self):
        f = self.get_field(min_length=3)
        with self.assertRaises(validation.ValidationError):
            f.validate("va")
        self.assertEqual(f.validate("valu"), "valu")
        self.assertEqual(f.validate("val"), "val")
        self.assertEqual(f.validate(1.2), "1.2")
        self.assertEqual(f.validate(1.15), "1.15")

    def test_max_length(self):
        f = self.get_field(max_length=3)
        self.assertEqual(f.validate("v"), "v")
        self.assertEqual(f.validate("va"), "va")
        self.assertEqual(f.validate("val"), "val")
        with self.assertRaises(validation.ValidationError):
            f.validate("valu")

    def test_choices(self):
        f = self.get_field(choices=("A", "B"))
        self.assertEqual(f.validate("A"), "A")
        self.assertEqual(f.validate("B"), "B")
        with self.assertRaises(validation.ValidationError):
            f.validate("C")
        with self.assertRaises(validation.ValidationError):
            f.validate("a")
        with self.assertRaises(validation.ValidationError):
            f.validate(None)

    def test_choices_nullable(self):
        f = self.get_field(choices=("A", "B"), null=True)
        self.assertEqual(f.validate("A"), "A")
        self.assertEqual(f.validate("B"), "B")
        self.assertEqual(f.validate(None), None)
        with self.assertRaises(validation.ValidationError):
            f.validate("C")
        with self.assertRaises(validation.ValidationError):
            f.validate("a")


class TestIntegerField(FieldTestMixin, TestCase):
    field_class = fields.IntegerField

    def test_value(self):
        f = self.get_field()
        self.assertEqual(f.validate(12), 12)
        self.assertEqual(f.validate("12"), 12)
        self.assertEqual(f.validate(12.3), 12)

    def test_max_length(self):
        f = self.get_field(max_length=3)
        self.assertEqual(f.validate(1), 1)
        self.assertEqual(f.validate(12), 12)
        self.assertEqual(f.validate(123), 123)
        with self.assertRaises(validation.ValidationError):
            f.validate(1234)

    def test_choices(self):
        f = self.get_field(choices=(1, 2))
        self.assertEqual(f.validate(1), 1)
        self.assertEqual(f.validate(2), 2)
        with self.assertRaises(validation.ValidationError):
            f.validate(3)
        with self.assertRaises(validation.ValidationError):
            f.validate(None)

    def test_choices_nullable(self):
        f = self.get_field(choices=(1, 2), null=True)
        self.assertEqual(f.validate(1), 1)
        self.assertEqual(f.validate(2), 2)
        self.assertEqual(f.validate(None), None)
        with self.assertRaises(validation.ValidationError):
            f.validate("3")
