#!/usr/bin/python3
import argparse
import logging
import sys
import a38.fattura as a38
import xml.etree.ElementTree as ET

log = logging.getLogger("test-parse")


class Fail(Exception):
    pass


def main():
    parser = argparse.ArgumentParser(description="test parsing fattura elettronica files")
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("pathname", help="file to parse")

    args = parser.parse_args()

    log_format = "%(asctime)-15s %(levelname)s %(message)s"
    level = logging.WARN
    if args.debug:
        level = logging.DEBUG
    elif args.verbose:
        level = logging.INFO
    logging.basicConfig(level=level, stream=sys.stderr, format=log_format)

    if args.pathname.endswith(".p7m"):
        from a38.crypto import P7M
        p7m = P7M(args.pathname)
        f = p7m.get_fattura()
    else:
        tree = ET.parse(args.pathname)
        f = a38.auto_from_etree(tree.getroot())

    import json
    json.dump(f.to_jsonable(), sys.stdout, indent=1)


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except Exception:
        log.exception("uncaught exception")
